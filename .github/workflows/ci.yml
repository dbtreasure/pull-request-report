name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install GitHub CLI
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y gh
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install gh
        fi

    - name: Install wkhtmltopdf (optional)
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get install -y wkhtmltopdf || echo "wkhtmltopdf installation failed, will use weasyprint"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install wkhtmltopdf || echo "wkhtmltopdf not available on macOS, will use weasyprint"
        fi

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run tests
      run: |
        source .venv/bin/activate
        python test/run_tests.py

    - name: Test CLI installation
      run: |
        source .venv/bin/activate
        pr-report --help

    - name: Test scripts (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x scripts/*.sh
        ./scripts/check.sh || true  # Don't fail if GitHub auth not available

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv --python 3.11

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run ruff (if available)
      run: |
        source .venv/bin/activate
        ruff check . || echo "Ruff not configured, skipping"

    - name: Check pyproject.toml syntax
      run: |
        source .venv/bin/activate
        python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name != 'pull_request' && github.repository_owner == 'dbtreasure'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Show Trivy results (fallback)
      if: always()
      run: |
        if [ -f trivy-results.sarif ]; then
          echo "Security scan completed. Results saved to trivy-results.sarif"
          # Show a summary of findings if any
          cat trivy-results.sarif | jq -r '.runs[0].results[]?.message?.text // "No vulnerabilities found"' | head -10 || echo "Security scan completed"
        fi